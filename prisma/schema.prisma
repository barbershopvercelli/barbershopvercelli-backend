// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  id          Int           @id @default(autoincrement())
  name        String
  address     String
  contact     String
  appointment Appointment[]
}

model Appointment {
  id            Int               @id @default(autoincrement())
  branchId      Int
  userId        Int
  branch        Branch            @relation(fields: [branchId], references: [id])
  user          User              @relation(fields: [userId], references: [id])
  services      Json // Array of service IDs
  date          DateTime
  description   String? // Optional field
  paymentMethod String // ENUM: STRIPE | POS
  totalCost     Float
  status        AppointmentStatus // Enum for status
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model User {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String?
  email        String?       @unique
  phone        String?       @unique
  password     String?
  avatarUrl    String?
  deviceIds    String[] // Changed from String to String[]
  role         Role          @default(USER)
  isVerified   Boolean?      @default(false)
  otp          otp?
  deletedAt    DateTime? // Soft delete field
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[] // A user can have multiple appointments
}

model otp {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  otp       Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       String
  iconName    String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

// Enum for Appointment status
enum AppointmentStatus {
  pending
  cancelled
  approved
}
